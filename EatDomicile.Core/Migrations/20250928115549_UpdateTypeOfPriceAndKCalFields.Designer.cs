// <auto-generated />
using System;
using EatDomicile.Core.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace TpCommandManagerData.Migrations
{
    [DbContext(typeof(CommandStoreContext))]
    [Migration("20250928115549_UpdateTypeOfPriceAndKCalFields")]
    partial class UpdateTypeOfPriceAndKCalFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TpCommandManagerData.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.Doughs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doughs");
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BurgerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAllergen")
                        .HasColumnType("bit");

                    b.Property<decimal>("KCal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PizzaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.HasIndex("PizzaId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeliveryAddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.Drink", b =>
                {
                    b.HasBaseType("TpCommandManagerData.Entities.Product");

                    b.Property<bool>("Fizzy")
                        .HasColumnType("bit");

                    b.Property<decimal>("KCal")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Drink");
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.Food", b =>
                {
                    b.HasBaseType("TpCommandManagerData.Entities.Product");

                    b.Property<bool>("Vegetarian")
                        .HasColumnType("bit");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.Burger", b =>
                {
                    b.HasBaseType("TpCommandManagerData.Entities.Food");

                    b.ToTable("Burger");
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.Pasta", b =>
                {
                    b.HasBaseType("TpCommandManagerData.Entities.Food");

                    b.Property<decimal>("KCal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Pastas");
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.Pizza", b =>
                {
                    b.HasBaseType("TpCommandManagerData.Entities.Food");

                    b.Property<int>("DoughsId")
                        .HasColumnType("int");

                    b.HasIndex("DoughsId");

                    b.ToTable("Pizzas");
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.Ingredient", b =>
                {
                    b.HasOne("TpCommandManagerData.Entities.Burger", "Burger")
                        .WithMany("Ingredients")
                        .HasForeignKey("BurgerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TpCommandManagerData.Entities.Pizza", "Pizza")
                        .WithMany("Ingredients")
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Burger");

                    b.Navigation("Pizza");
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.Order", b =>
                {
                    b.HasOne("TpCommandManagerData.Entities.Address", "DeliveryAddress")
                        .WithMany()
                        .HasForeignKey("DeliveryAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TpCommandManagerData.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.OrderProduct", b =>
                {
                    b.HasOne("TpCommandManagerData.Entities.Order", "Order")
                        .WithMany("OrderProduct")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TpCommandManagerData.Entities.Product", "Product")
                        .WithMany("OrderProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.User", b =>
                {
                    b.HasOne("TpCommandManagerData.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.Drink", b =>
                {
                    b.HasOne("TpCommandManagerData.Entities.Product", null)
                        .WithOne()
                        .HasForeignKey("TpCommandManagerData.Entities.Drink", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.Food", b =>
                {
                    b.HasOne("TpCommandManagerData.Entities.Product", null)
                        .WithOne()
                        .HasForeignKey("TpCommandManagerData.Entities.Food", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.Burger", b =>
                {
                    b.HasOne("TpCommandManagerData.Entities.Food", null)
                        .WithOne()
                        .HasForeignKey("TpCommandManagerData.Entities.Burger", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.Pasta", b =>
                {
                    b.HasOne("TpCommandManagerData.Entities.Food", null)
                        .WithOne()
                        .HasForeignKey("TpCommandManagerData.Entities.Pasta", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.Pizza", b =>
                {
                    b.HasOne("TpCommandManagerData.Entities.Doughs", "Doughs")
                        .WithMany()
                        .HasForeignKey("DoughsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TpCommandManagerData.Entities.Food", null)
                        .WithOne()
                        .HasForeignKey("TpCommandManagerData.Entities.Pizza", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doughs");
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.Order", b =>
                {
                    b.Navigation("OrderProduct");
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.Product", b =>
                {
                    b.Navigation("OrderProduct");
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.Burger", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("TpCommandManagerData.Entities.Pizza", b =>
                {
                    b.Navigation("Ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
